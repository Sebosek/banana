/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import '@stencil/core';


import {
  feedback,
  state,
} from './components/input/input';
import {
  State,
} from './components/validations/validation.service';


declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface BananaButton {

    }

    interface BananaFail {

    }

    interface BananaInput {
      'disabled': boolean;
      'feedback': feedback;
      'label': string;
      'name': string;
      'placeholder': string;
      'readonly': boolean;
      'state': state;
      'value': string;
    }

    interface BananaPending {

    }

    interface BananaSuccess {

    }

    interface BananaCustomValidator {
      'for': string;
      'state': State;
      'value': string;
    }

    interface BananaEmailValidation {
      'for': string;
      'state': State;
      'value': string;
    }

    interface BananaRegexValidation {
      'for': string;
      'regex': string;
      'state': State;
      'value': string;
    }

    interface BananaRequiredValidation {
      'for': string;
      'state': State;
      'value': string;
    }

    interface BananaSameValidation {
      'as': string;
      'for': string;
      'state': State;
      'value': string;
    }

    interface BananaValidations {

    }

    interface BananaValidator {

    }
  }


    interface HTMLBananaButtonElement extends StencilComponents.BananaButton, HTMLStencilElement {}

    var HTMLBananaButtonElement: {
      prototype: HTMLBananaButtonElement;
      new (): HTMLBananaButtonElement;
    };
    

    interface HTMLBananaFailElement extends StencilComponents.BananaFail, HTMLStencilElement {}

    var HTMLBananaFailElement: {
      prototype: HTMLBananaFailElement;
      new (): HTMLBananaFailElement;
    };
    

    interface HTMLBananaInputElement extends StencilComponents.BananaInput, HTMLStencilElement {}

    var HTMLBananaInputElement: {
      prototype: HTMLBananaInputElement;
      new (): HTMLBananaInputElement;
    };
    

    interface HTMLBananaPendingElement extends StencilComponents.BananaPending, HTMLStencilElement {}

    var HTMLBananaPendingElement: {
      prototype: HTMLBananaPendingElement;
      new (): HTMLBananaPendingElement;
    };
    

    interface HTMLBananaSuccessElement extends StencilComponents.BananaSuccess, HTMLStencilElement {}

    var HTMLBananaSuccessElement: {
      prototype: HTMLBananaSuccessElement;
      new (): HTMLBananaSuccessElement;
    };
    

    interface HTMLBananaCustomValidatorElement extends StencilComponents.BananaCustomValidator, HTMLStencilElement {}

    var HTMLBananaCustomValidatorElement: {
      prototype: HTMLBananaCustomValidatorElement;
      new (): HTMLBananaCustomValidatorElement;
    };
    

    interface HTMLBananaEmailValidationElement extends StencilComponents.BananaEmailValidation, HTMLStencilElement {}

    var HTMLBananaEmailValidationElement: {
      prototype: HTMLBananaEmailValidationElement;
      new (): HTMLBananaEmailValidationElement;
    };
    

    interface HTMLBananaRegexValidationElement extends StencilComponents.BananaRegexValidation, HTMLStencilElement {}

    var HTMLBananaRegexValidationElement: {
      prototype: HTMLBananaRegexValidationElement;
      new (): HTMLBananaRegexValidationElement;
    };
    

    interface HTMLBananaRequiredValidationElement extends StencilComponents.BananaRequiredValidation, HTMLStencilElement {}

    var HTMLBananaRequiredValidationElement: {
      prototype: HTMLBananaRequiredValidationElement;
      new (): HTMLBananaRequiredValidationElement;
    };
    

    interface HTMLBananaSameValidationElement extends StencilComponents.BananaSameValidation, HTMLStencilElement {}

    var HTMLBananaSameValidationElement: {
      prototype: HTMLBananaSameValidationElement;
      new (): HTMLBananaSameValidationElement;
    };
    

    interface HTMLBananaValidationsElement extends StencilComponents.BananaValidations, HTMLStencilElement {}

    var HTMLBananaValidationsElement: {
      prototype: HTMLBananaValidationsElement;
      new (): HTMLBananaValidationsElement;
    };
    

    interface HTMLBananaValidatorElement extends StencilComponents.BananaValidator, HTMLStencilElement {}

    var HTMLBananaValidatorElement: {
      prototype: HTMLBananaValidatorElement;
      new (): HTMLBananaValidatorElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'banana-button': JSXElements.BananaButtonAttributes;
    'banana-fail': JSXElements.BananaFailAttributes;
    'banana-input': JSXElements.BananaInputAttributes;
    'banana-pending': JSXElements.BananaPendingAttributes;
    'banana-success': JSXElements.BananaSuccessAttributes;
    'banana-custom-validator': JSXElements.BananaCustomValidatorAttributes;
    'banana-email-validation': JSXElements.BananaEmailValidationAttributes;
    'banana-regex-validation': JSXElements.BananaRegexValidationAttributes;
    'banana-required-validation': JSXElements.BananaRequiredValidationAttributes;
    'banana-same-validation': JSXElements.BananaSameValidationAttributes;
    'banana-validations': JSXElements.BananaValidationsAttributes;
    'banana-validator': JSXElements.BananaValidatorAttributes;
    }
  }

  namespace JSXElements {

    export interface BananaButtonAttributes extends HTMLAttributes {

    }

    export interface BananaFailAttributes extends HTMLAttributes {

    }

    export interface BananaInputAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'feedback'?: feedback;
      'label'?: string;
      'name'?: string;
      'onChange'?: (event: CustomEvent<string>) => void;
      'placeholder'?: string;
      'readonly'?: boolean;
      'state'?: state;
      'value'?: string;
    }

    export interface BananaPendingAttributes extends HTMLAttributes {

    }

    export interface BananaSuccessAttributes extends HTMLAttributes {

    }

    export interface BananaCustomValidatorAttributes extends HTMLAttributes {
      'for'?: string;
      'onActivated'?: (event: CustomEvent) => void;
      'state'?: State;
      'value'?: string;
    }

    export interface BananaEmailValidationAttributes extends HTMLAttributes {
      'for'?: string;
      'state'?: State;
      'value'?: string;
    }

    export interface BananaRegexValidationAttributes extends HTMLAttributes {
      'for'?: string;
      'regex'?: string;
      'state'?: State;
      'value'?: string;
    }

    export interface BananaRequiredValidationAttributes extends HTMLAttributes {
      'for'?: string;
      'state'?: State;
      'value'?: string;
    }

    export interface BananaSameValidationAttributes extends HTMLAttributes {
      'as'?: string;
      'for'?: string;
      'state'?: State;
      'value'?: string;
    }

    export interface BananaValidationsAttributes extends HTMLAttributes {

    }

    export interface BananaValidatorAttributes extends HTMLAttributes {

    }
  }

  interface HTMLElementTagNameMap {
    'banana-button': HTMLBananaButtonElement
    'banana-fail': HTMLBananaFailElement
    'banana-input': HTMLBananaInputElement
    'banana-pending': HTMLBananaPendingElement
    'banana-success': HTMLBananaSuccessElement
    'banana-custom-validator': HTMLBananaCustomValidatorElement
    'banana-email-validation': HTMLBananaEmailValidationElement
    'banana-regex-validation': HTMLBananaRegexValidationElement
    'banana-required-validation': HTMLBananaRequiredValidationElement
    'banana-same-validation': HTMLBananaSameValidationElement
    'banana-validations': HTMLBananaValidationsElement
    'banana-validator': HTMLBananaValidatorElement
  }

  interface ElementTagNameMap {
    'banana-button': HTMLBananaButtonElement;
    'banana-fail': HTMLBananaFailElement;
    'banana-input': HTMLBananaInputElement;
    'banana-pending': HTMLBananaPendingElement;
    'banana-success': HTMLBananaSuccessElement;
    'banana-custom-validator': HTMLBananaCustomValidatorElement;
    'banana-email-validation': HTMLBananaEmailValidationElement;
    'banana-regex-validation': HTMLBananaRegexValidationElement;
    'banana-required-validation': HTMLBananaRequiredValidationElement;
    'banana-same-validation': HTMLBananaSameValidationElement;
    'banana-validations': HTMLBananaValidationsElement;
    'banana-validator': HTMLBananaValidatorElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;